using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using CruiseDAL.DataObjects;
using CruiseDAL;
using CruiseProcessing.Services;
using iTextSharp.text;
using System.Runtime.CompilerServices;
using Microsoft.Extensions.Logging;
using System.Collections;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using CruiseProcessing.Data;
using CruiseProcessing.Async;
using CruiseProcessing.Processing;

namespace CruiseProcessing
{
    public partial class ProcessStatus : Form
    {
        public CpDataLayer DataLayer { get; }
        public IDialogService DialogService { get; }

        protected IProgress<string> ProcessProgress { get; }

        protected ILogger Logger { get; }
        public ICruiseProcessor CruiseProcessor { get; }
        public IServiceProvider Services { get; }

        private void ProcessProgress_OnProgressChanged(string obj)
        {
            if (processingStatus.InvokeRequired)
            {
                processingStatus.Invoke(new Action(() => ProcessProgress_OnProgressChanged(obj)));
            }
            else
            {
                processingStatus.Text = obj;
            }

        }

        protected ProcessStatus()
        {
            InitializeComponent();

            ProcessProgress = new Progress<string>(ProcessProgress_OnProgressChanged);
        }

        public ProcessStatus(CpDataLayer dataLayer, IDialogService dialogService, ILogger<ProcessStatus> logger, ICruiseProcessor cruiseProcessor)
    : this()
        {
            DataLayer = dataLayer ?? throw new ArgumentNullException(nameof(dataLayer));
            DialogService = dialogService ?? throw new ArgumentNullException(nameof(dialogService));
            Logger = logger ?? throw new ArgumentNullException(nameof(logger));
            CruiseProcessor = cruiseProcessor ?? throw new ArgumentNullException(nameof(cruiseProcessor));
        }

        private void on_GO(object sender, EventArgs e)
        {
            Process().FireAndForget();
        }

        public async Task Process()
        {
            if (!DoPreProcessChecks())
            {
                Close();
                return;
            }

            prepareCheck.Enabled = true;
            Cursor.Current = Cursors.WaitCursor;
            editCheck.Enabled = true;
            goButton.Enabled = false;

            try
            {
                await CruiseProcessor.ProcessCruiseAsync(ProcessProgress);

                volumeCheck.Enabled = true;
                //DialogResult = DialogResult.OK; // setting DialogResult will automaticly close form, also we don't really need to use dialogResult. 
            }
            catch (Exception ex)
            {
                DialogService.ShowError("Processing Error: " + ex.GetType().Name);
                //DialogResult = DialogResult.Abort;
            }
            finally
            {
                Cursor.Current = this.Cursor;
            }
        }

        public bool DoPreProcessChecks()
        {
            //  check for errors from FScruiser before running edit checks
            //  generate an error report
            //  June 2013
            List<ErrorLogDO> fscList = DataLayer.getErrorMessages("E", "FScruiser");
            if (fscList.Any())
            {
                var messagesAndCounts = fscList.GroupBy(x => x.Message)
                    .Select(x => (Message: x.Key, Count: x.Count()));
                foreach (var i in messagesAndCounts)
                {
                    Logger.LogInformation("FScruiser Errors Found: {Message} Count:{Count}", i.Message, i.Count);
                }


                ErrorReport eRpt = new ErrorReport(DataLayer, DataLayer.GetReportHeaderData());
                var outputFileName = eRpt.PrintErrorReport(fscList, "FScruiser");
                string outputMessage = "ERRORS FROM FSCRUISER FOUND!\nCorrect data and rerun\nOutput file is:" + outputFileName;
                DialogService.ShowError(outputMessage);
                //  request made to open error report in preview -- May 2015
                DialogService.ShowPrintPreview();

                return false;
            }   //  endif report needed

            var allMeasureTrees = DataLayer.JustMeasuredTrees();

            //  March 2016 -- if the entire cruisde has no measured trees, that uis a critical erro
            //  and should stop the program.  Since no report can be generated, a message box appears to warn the user
            //  of the condition.
            if (allMeasureTrees.Count == 0)
            {
                Logger.LogInformation("No Measure Trees In Cruise");

                DialogService.ShowError("NO MEASURED TREES IN THIS CRUISE.\r\nCannot continue and cannot produce any reports.");
                return false;
            }

            List<StratumDO> sList = DataLayer.GetStrata();
            foreach (var st in sList)
            {
                var stTrees = DataLayer.GetTreesByStratum(st.Code);

                //  warn user if the stratum has no trees at all
                if (stTrees.Any() == false)
                {
                    Logger.LogInformation("Stratum Contains No Data: Code {StratumCode}", st.Code);
                    string warnMsg = "WARNING!  Stratum ";
                    warnMsg += st.Code;
                    warnMsg += " has no trees recorded.  Some reports may not be complete.\nContinue?";

                    if (!DialogService.ShowWarningAskYesNo(warnMsg))
                    { return false; }

                    Logger.LogInformation("Stratum Contains No Data, Continuing");
                }   //  endif no trees
            }


            processingStatus.Text = "READY TO BEGIN?  Click GO.";
            //Cursor.Current = Cursors.WaitCursor;
            //  perform edit checks -- 
            processingStatus.Text = "Edit checking the data.  Please wait.";
            processingStatus.Refresh();


            var errors = EditChecks.CheckErrors(DataLayer);
            if (errors.Any())
            {
                var messagesAndCounts = errors.GroupBy(x => x.Message)
                    .Select(x => (Message: x.Key, Count: x.Count()));
                foreach (var i in messagesAndCounts)
                {
                    Logger.LogInformation("EditCheck Errors Found: {Message} Count:{Count}", i.Message, i.Count);
                }

                DataLayer.SaveErrorMessages(errors);


                //  just check the ErrorLog table for entries
                if (errors.Any(x => x.Level == "E"))
                {
                    ErrorReport er = new ErrorReport(DataLayer, DataLayer.GetReportHeaderData());
                    var outputFileName = er.PrintErrorReport(errors, "CruiseProcessing");
                    string outputMessage = "ERRORS FOUND!\nCorrect data and rerun\nOutput file is:" + outputFileName;
                    DialogService.ShowError(outputMessage);
                    //  request made to open error report in preview -- May 2015
                    DialogService.ShowPrintPreview();

                    return false;
                }   //  endif report needed
            }

            return true;
        }
    }
}
