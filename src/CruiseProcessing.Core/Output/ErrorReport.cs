using CruiseDAL.DataObjects;
using CruiseProcessing.Services;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;

namespace CruiseProcessing
{
    public class ErrorReport : CreateTextFile
    {
        private int pageNumber = 0;
        private string outFile;
        private int[] fieldLengths;
        private List<string> prtFields = new List<string>();
        private StringBuilder currError = new StringBuilder();
        private StringBuilder ident = new StringBuilder();
        private string errMessage;

        private string[,] messages = new string[32, 2] {{"1","Invalid volume, value or quality adjustment equation number"},
                                                        {"2","Value or quality adjustment coefficient missing on this record"},
                                                        {"3","Must find primary product before secondary product"},
                                                        {"4","Secondary top DIB is greater than primary top DIB"},
                                                        {"5","Duplicate volumes requested on same species/product code"},
                                                        {"6","Same equation number with different top diameters"},
                                                        {"7","Invalid ... number"},
                                                        {"8","... cannot be blank or empty"},
                                                        {"9","... contains an invalid code"},
                                                        {"10","Tree count cannot be greater than 1 for this record"},
                                                        {"11","Count/measure code is in error on this record"},
                                                        {"12","No volume equation match"},
                                                        {"13","More than 20 logs for this tree"},
                                                        {"14","Strata/Sample Group tree must have same UOM, product and cut/leave codes"},
                                                        {"15","Plot cannot have both count and measure trees"},
                                                        {"16","Method must have species, product, UOM, and/or leave codes blank"},
                                                        {"17","Method must have one sample group per stratum"},
                                                        {"18","Cannot have an upper stem diameter greater than DBH"},
                                                        {"19","Variable log length cruise is missing mandatory fields"},
                                                        {"20","Gross data must be greater than or equal to net data"},
                                                        {"21","Species, product or UOM codes must be entered on this record"},
                                                        {"22","Basal area factor required for Point cruises"},
                                                        {"23","Fixed plot size required for Fixed Plot cruises"},
                                                        {"24","Acres required for area based cruises"},
                                                        {"25","... table cannot be empty"},
                                                        {"26","No reports selected"},
                                                        {"27","KPI estimate cannot be zero for this tree"},
                                                        {"28","More than one sale record not allowed"},
                                                        {"29","Percent Recoverable cannot be greater than Percent Seen Defect"},
                                                        {"30","Sample group has no measured trees"},
                                                        {"31","Invalid tree default value key code on tree; Contact FMSC for help"},
                                                        {"32","No height recorded for this tree"}};

        private string[] errorHeading = new string[6] {"                                                      ****  ERROR REPORT  ****",
                                                       "                                                          FOR CRUISE NUMBER",
                                                       "",
                                                       " THESE ERRORS WERE GENERATED BY XXXXX",
                                                       " TABLE                                                                                   IDENTIFICATION",
                                                       " NAME               ERROR                                                                ST CU  PL   TR   LG  SP     SG PR EQ"};

        public ErrorReport(CPbusinessLayer dataLayer, IDialogService dialogService) : base(dataLayer, dialogService)
        {
        }

        protected string AppVerson => Assembly.GetExecutingAssembly().GetName().Version.ToString().TrimEnd('0').TrimEnd('.');

        public string PrintErrorReport(List<ErrorLogDO> errList)
        {
            //  fix filename for output
            outFile = System.IO.Path.ChangeExtension(FilePath, "out");
            //  what's the current region?
            string currRegion = DataLayer.getRegion();

            //  open output file and write report
            using (StreamWriter strWriteOut = new StreamWriter(outFile))
            {
                //  Output banner page except for BLM
                if (currRegion != "07" && currRegion != "7" && currRegion != "BLM")
                {
                    BannerPage bp = new BannerPage();
                    bp.outputBannerPage(FilePath, strWriteOut, currentDate, currentVersion, DLLversion, DataLayer);
                }   //  endif

                //  output errors only -- warnings printed in regular output file
                fieldLengths = new int[] { 1, 18, 69, 43 };
                //  add program name to error heading
                errorHeading[3] = errorHeading[3].Replace("XXXXX", errList[0].Program);
                //  add cruise number to report title
                string cruiseNumber = DataLayer.getCruiseNumber();
                errorHeading[2] = "                                                              " + cruiseNumber;
                writeHeaders(strWriteOut);

                //  write appropriate error messages
                foreach (ErrorLogDO eld in errList)
                {
                    prtFields.Add("");
                    prtFields.Add(eld.TableName);
                    switch (eld.TableName)
                    {
                        case "Sale":
                            SaleErrors(eld);
                            break;

                        case "Stratum":
                            StratumErrors(eld);
                            break;

                        case "Cutting Unit":
                            UnitErrors(eld);
                            break;

                        case "CountTree":
                            CountErrors(eld);
                            break;

                        case "Tree":
                            TreeErrors(eld);
                            break;

                        case "Log":
                            LogErrors(eld);
                            break;

                        case "VolumeEquation":
                            VolEqErrors(eld);
                            break;

                        case "ValueEquation":
                            ValEqErrors(eld);
                            break;

                        case "QualityAdjustment":
                            QAErrors(eld);
                            break;

                        case "Reports":
                            RptErrors(eld);
                            break;

                        case "SampleGroup":
                            SGErrors(eld);
                            break;
                    }   //  end switch
                    StringBuilder sb = buildPrintLine(fieldLengths, prtFields);
                    WriteCurrentError(strWriteOut, ref pageNumber, sb);
                    sb.Remove(0, sb.Length);
                    prtFields.Clear();
                }   //  end foreach loop
                //  output identification key
                OutputIdKey(strWriteOut);
                strWriteOut.Close();
            }   //  end using

            return outFile;
        }   //  end PrintErrorReport

        public string PrintFScruiserErrors(List<ErrorLogDO> eldList)
        {
            //  make output filename
            outFile = System.IO.Path.ChangeExtension(FilePath, "out");
            string cruiseNumber = DataLayer.getCruiseNumber();
            string currRegion = DataLayer.getRegion();

            //  write report
            using (StreamWriter strWriteOut = new StreamWriter(outFile))
            {
                //  Output banner page except for BLM
                if (currRegion != "07" && currRegion != "7" && currRegion != "BLM")
                {
                    BannerPage bp = new BannerPage();
                    bp.outputBannerPage(FilePath, strWriteOut, currentDate, currentVersion, DLLversion, DataLayer);
                }
                //  setup field lengths and write headers
                fieldLengths = new int[] { 1, 18, 70, 43 };
                errorHeading[3] = errorHeading[3].Replace("XXXXX", eldList[0].Program);
                errorHeading[2] = "                                                              " + cruiseNumber;
                writeHeaders(strWriteOut);

                //  write error messages
                foreach (ErrorLogDO eld in eldList)
                {
                    prtFields.Add("");
                    prtFields.Add(eld.TableName);
                    if (eld.Message.Length > 70 && eld.Program == "CruiseProcessing")
                        prtFields.Add(eld.Message.Remove(70, eld.Message.Length - 69));
                    else prtFields.Add(eld.Message);
                    //  add appriorate identifier for table
                    ident = Utilities.GetIdentifier(eld.TableName, eld.CN_Number, DataLayer);
                    prtFields.Add(ident.ToString());
                    StringBuilder sb = buildPrintLine(fieldLengths, prtFields);
                    WriteCurrentError(strWriteOut, ref pageNumber, sb);
                    sb.Clear();
                    prtFields.Clear();
                }   //  end foreach loop

                //  output identification key
                OutputIdKey(strWriteOut);
                strWriteOut.Close();
            }   //  end using

            return outFile;
        }   //  end PrintFScruiserErrors

        private void SaleErrors(ErrorLogDO eld)
        {
            //  get error message
            currError.Remove(0, currError.Length);
            if (eld.Message.Substring(0, 2) == "11")
            {
                errMessage = getErrorMessage("11");
                errMessage = errMessage.Replace("...", eld.Message.Substring(2, eld.Message.Length - 2));
                errMessage.Insert(0, eld.Message.Substring(0, 2));
                errMessage.Insert(2, "-");
            }
            else if (eld.Message.Substring(0, 2) == " 8")
            {
                errMessage = getErrorMessage("8");
                errMessage = errMessage.Replace("...", eld.Message.Substring(2, eld.Message.Length - 2));
                errMessage = errMessage.Insert(0, eld.Message.Substring(0, 2));
                errMessage = errMessage.Insert(2, "-");
            }
            else
            {
                currError.Append(eld.Message);
                currError.Append("-");
                errMessage = getErrorMessage(eld.Message);
            }   //  endif

            currError.Append(errMessage);
            if (currError.Length > 70) currError = currError.Remove(70, currError.Length - 69);
            prtFields.Add(currError.ToString().PadRight(70, ' '));

            if (eld.Message == "25")
                prtFields.Add("SALE");
            else
            {
                ident = Utilities.GetIdentifier(eld.TableName, eld.CN_Number, DataLayer);
                prtFields.Add(ident.ToString());
            }   //  endif
            return;
        }   //  end SaleError

        private void StratumErrors(ErrorLogDO eld)
        {
            currError.Remove(0, currError.Length);
            currError.Append(eld.Message);
            currError.Append("-");
            errMessage = getErrorMessage(eld.Message);
            if (currError.Length > 70) currError = currError.Remove(70, currError.Length - 69);
            if (eld.Message == "25")
            {
                errMessage = errMessage.Replace("...", "Stratum");
                currError.Append(errMessage);
                prtFields.Add(currError.ToString().PadRight(70, ' '));
                prtFields.Add("STRATUM");
            }
            else
            {
                currError.Append(errMessage);
                prtFields.Add(currError.ToString().PadRight(70, ' '));
                ident = Utilities.GetIdentifier(eld.TableName, eld.CN_Number, DataLayer);
                prtFields.Add(ident.ToString());
            }   //  endif
            return;
        }   //  end StratumErrors

        private void UnitErrors(ErrorLogDO eld)
        {
            currError.Remove(0, currError.Length);
            currError.Append(eld.Message);
            currError.Append("-");
            errMessage = getErrorMessage(eld.Message);
            if (currError.Length > 70) currError = currError.Remove(70, currError.Length - 70);
            if (eld.Message == "25")
            {
                errMessage = errMessage.Replace("...", "CuttingUnit");
                currError.Append(errMessage);
                prtFields.Add(currError.ToString().PadRight(70, ' '));
                prtFields.Add("CUTTING UNIT");
            }
            else
            {
                currError.Append(errMessage);
                prtFields.Add(currError.ToString().PadRight(70, ' '));
                ident = Utilities.GetIdentifier(eld.TableName, eld.CN_Number, DataLayer);
                prtFields.Add(ident.ToString());
            }   //  endif
            return;
        }   //  end UnitErrors

        private void CountErrors(ErrorLogDO eld)
        {
            prtFields.Add(eld.Message.PadRight(70, ' '));
            prtFields.Add(eld.ColumnName);
        }   //  end CountErrors

        private void TreeErrors(ErrorLogDO eld)
        {
            currError.Remove(0, currError.Length);
            currError.Append(eld.Message);
            currError.Append("-");
            errMessage = getErrorMessage(eld.Message);
            if (currError.Length > 70) currError = currError.Remove(70, currError.Length - 70);

            if (eld.Message == "25")
            {
                errMessage = errMessage.Replace("...", "Tree");
                currError.Append(errMessage);
                prtFields.Add(currError.ToString().PadRight(70, ' '));
                prtFields.Add("TREE");
            }
            else
            {
                errMessage = errMessage.Replace("...", eld.ColumnName);
                currError.Append(errMessage);
                prtFields.Add(currError.ToString().PadRight(70, ' '));
                ident = Utilities.GetIdentifier(eld.TableName, eld.CN_Number, DataLayer);
                prtFields.Add(ident.ToString());
            }   //  endif
            return;
        }   //  end TreeErrors

        private void LogErrors(ErrorLogDO eld)
        {
            currError.Remove(0, currError.Length);
            currError.Append(eld.Message);
            currError.Append("-");
            errMessage = getErrorMessage(eld.Message);
            errMessage = errMessage.Replace("...", eld.ColumnName);
            if (currError.Length > 70) currError = currError.Remove(70, currError.Length - 70);
            currError.Append(errMessage);
            prtFields.Add(currError.ToString().PadRight(70, ' '));

            ident = Utilities.GetIdentifier(eld.TableName, eld.CN_Number, DataLayer);
            prtFields.Add(ident.ToString());

            return;
        }   //  end LogErrors

        private void VolEqErrors(ErrorLogDO eld)
        {
            currError.Remove(0, currError.Length);
            currError.Append(eld.Message);
            currError.Append("-");
            errMessage = getErrorMessage(eld.Message);
            if (currError.Length > 70) currError = currError.Remove(70, currError.Length - 70);

            if (eld.Message == "25")
            {
                errMessage = errMessage.Replace("...", "VolumeEquation");
                currError.Append(errMessage);
                prtFields.Add(currError.ToString().PadRight(70, ' '));
                prtFields.Add("VOLUME EQUATION");
            }
            else
            {
                currError.Append(errMessage);
                prtFields.Add(currError.ToString().PadRight(70, ' '));
                ident = Utilities.GetIdentifier(eld.TableName, eld.CN_Number, DataLayer);
                prtFields.Add(ident.ToString());
            }   //  endif

            return;
        }   //  end VolEqErrors

        private void ValEqErrors(ErrorLogDO eld)
        {
            currError.Remove(0, currError.Length);
            currError.Append(eld.Message);
            currError.Append("-");
            errMessage = getErrorMessage(eld.Message);
            if (currError.Length > 70) currError = currError.Remove(70, currError.Length - 70);

            if (eld.Message == "25")
            {
                errMessage = errMessage.Replace("...", "ValueEquation");
                currError.Append(errMessage);
                prtFields.Add(currError.ToString().PadRight(70, ' '));
                prtFields.Add("VALUE EQUATION");
            }
            else
            {
                currError.Append(errMessage);
                prtFields.Add(currError.ToString().PadRight(70, ' '));
                ident = Utilities.GetIdentifier(eld.TableName, eld.CN_Number, DataLayer);
                prtFields.Add(ident.ToString());
            }   //  endif
            return;
        }   //  end ValEqErrors

        private void QAErrors(ErrorLogDO eld)
        {
            currError.Remove(0, currError.Length);
            currError.Append(eld.Message);
            currError.Append("-");
            errMessage = getErrorMessage(eld.Message);
            if (currError.Length > 70) currError = currError.Remove(70, currError.Length - 70);

            if (eld.Message == "25")
            {
                errMessage = errMessage.Replace("...", "QualityAdjustmentEquation");
                currError.Append(errMessage);
                prtFields.Add(currError.ToString().PadRight(70, ' '));
                prtFields.Add("QUALITY ADJUSTMENT EQUATION");
            }
            else
            {
                currError.Append(errMessage);
                prtFields.Add(currError.ToString().PadRight(70, ' '));
                ident = Utilities.GetIdentifier(eld.TableName, eld.CN_Number, DataLayer);
                prtFields.Add(ident.ToString());
            }   //  endif
            return;
        }   //  end QAErrors

        private void RptErrors(ErrorLogDO eld)
        {
            currError.Remove(0, currError.Length);
            errMessage = getErrorMessage(eld.Message);

            currError.Append(eld.Message);
            currError.Append("-");
            currError.Append(errMessage);
            if (currError.Length > 70) currError = currError.Remove(70, currError.Length - 70);
            prtFields.Add(currError.ToString().PadRight(70, ' '));

            prtFields.Add("REPORTS");

            return;
        }   //  end OutputRptErrors

        private void SGErrors(ErrorLogDO eld)
        {
            currError.Remove(0, currError.Length);
            errMessage = getErrorMessage(eld.Message);

            errMessage = errMessage.Replace("...", eld.ColumnName);
            currError.Append(eld.Message);
            currError.Append("-");
            currError.Append(errMessage);
            if (currError.Length > 70) currError = currError.Remove(70, currError.Length - 70);
            prtFields.Add(currError.ToString().PadRight(70, ' '));

            ident = Utilities.GetIdentifier(eld.TableName, eld.CN_Number, DataLayer);
            prtFields.Add(ident.ToString());
            return;
        }   //  end SGErrors

        private string getErrorMessage(string errNumber)
        {
            for (int k = 0; k < 32; k++)
            {
                if (errNumber == messages[k, 0])
                    return messages[k, 1];
            }   //  end for k loop

            return "OOPS";
        }   //  end getErrorMessage

        private void WriteCurrentError(StreamWriter strWriteOut, ref int pageNumber, StringBuilder sb)
        {
            writeHeaders(strWriteOut);
            strWriteOut.WriteLine(sb.ToString());
            numOlines++;
        }   //  end WriteCurrentError

        private void writeHeaders(StreamWriter strWriteOut)
        {
            StringBuilder headerLine = new StringBuilder();
            if (numOlines >= 54 || numOlines == 0)
            {
                strWriteOut.WriteLine("\f");
                pageNumber++;
                headerLine.Remove(0, headerLine.Length);
                headerLine.Append("RUN DATE & TIME ");
                headerLine.Append(currentDate);
                headerLine.Append("                                                                                     PAGE  ");
                headerLine.Append(pageNumber);
                strWriteOut.WriteLine(headerLine.ToString());
                headerLine.Remove(0, headerLine.Length);
                headerLine.Append("FILENAME:  ");
                headerLine.Append(outFile);
                strWriteOut.WriteLine(headerLine.ToString());
                numOlines = 2;
                //  write report title and column headings
                for (int j = 0; j < 5; j++)
                {
                    strWriteOut.WriteLine(errorHeading[j]);
                    numOlines++;
                }   //  end for j loop
            }   //  end numOlines
        }   //  end writeHeaders

        private void OutputIdKey(StreamWriter strWriteOut)
        {
            strWriteOut.WriteLine("\n");
            strWriteOut.WriteLine("Order of Identification Elements");
            strWriteOut.WriteLine("Some elements may be blank");
            strWriteOut.WriteLine("ST = Stratum");
            strWriteOut.WriteLine("CU = Cutting Unit");
            strWriteOut.WriteLine("PL = Plot");
            strWriteOut.WriteLine("TR = Tree number");
            strWriteOut.WriteLine("LG = log number");
            strWriteOut.WriteLine("SP = Species");
            strWriteOut.WriteLine("SG = Sample Group");
            strWriteOut.WriteLine("PR = Primary Product");
            strWriteOut.WriteLine("EQ = Equation");
            return;
        }   //  end OutputIdKey
    }   //  end ErrorReport
}